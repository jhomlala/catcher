import 'package:catcher/model/platform_type.dart';
import 'package:catcher/model/report.dart';
import 'package:catcher/model/report_handler.dart';
import 'package:logging/logging.dart';
import 'package:sentry/sentry.dart';

class SentryHandler extends ReportHandler {
  ///Sentry Client instance
  final SentryClient sentryClient;

  ///User data
  User userContext;

  ///Enable device parameters to be generated by Catcher
  final bool enableDeviceParameters;

  ///Enable application parameters to be generated by Catcher
  final bool enableApplicationParameters;

  ///Enable custom parameters to be generated by Catcher
  final bool enableCustomParameters;

  ///Custom environment, if null, Catcher will generate it
  final String customEnvironment;

  ///Custom release, if null, Catcher will generate it
  final String customRelease;

  ///Enable additional logs printing
  final bool printLogs;
  final Logger _logger = Logger("SentryHandler");

  SentryHandler(
    this.sentryClient, {
    this.userContext,
    this.enableDeviceParameters = true,
    this.enableApplicationParameters = true,
    this.enableCustomParameters = true,
    this.printLogs = true,
    this.customEnvironment,
    this.customRelease,
  })  : assert(sentryClient != null, "sentryClient can't be null"),
        assert(enableDeviceParameters != null,
            "enableDeviceParameters can't be null"),
        assert(enableApplicationParameters != null,
            "enableApplicationParameters can't be null"),
        assert(enableCustomParameters != null,
            "enableCustomParameters can't be null"),
        assert(printLogs != null, "printLogs can't be null");

  @override
  Future<bool> handle(Report error) async {
    try {
      _printLog("Logging to sentry...");

      var tags = Map<String, dynamic>();
      if (enableApplicationParameters) {
        tags.addAll(error.applicationParameters);
      }
      if (enableDeviceParameters) {
        tags.addAll(error.deviceParameters);
      }
      if (enableCustomParameters) {
        tags.addAll(error.customParameters);
      }

      var event = buildEvent(error, tags);
      await sentryClient.captureEvent(event);

      _printLog("Logged to sentry!");
      return true;
    } catch (exception, stackTrace) {
      _printLog("Failed to send sentry event: $exception $stackTrace");
      return false;
    }
  }

  String _getApplicationVersion(Report report) {
    String applicationVersion = "";
    var applicationParameters = report.applicationParameters;
    if (applicationParameters.containsKey("appName")) {
      applicationVersion += applicationParameters["appName"];
    }
    if (applicationParameters.containsKey("version")) {
      applicationVersion += " ${applicationParameters["version"]}";
    }
    if (applicationVersion.isEmpty) {
      applicationVersion = "?";
    }
    return applicationVersion;
  }

  SentryEvent buildEvent(Report report, Map<String, dynamic> tags) {
    return SentryEvent(
      logger: "Catcher",
      serverName: "Catcher",
      release: customRelease != null
          ? customRelease
          : _getApplicationVersion(report),
      environment: customEnvironment != null
          ? customEnvironment
          : report.applicationParameters["environment"],
      message: Message("Error handled by Catcher"),
      throwable: report.error,
      level: SentryLevel.error,
      culprit: "",
      tags: changeToSentryMap(tags),
      user: this.userContext,
    );
  }

  Map<String, String> changeToSentryMap(Map<String, dynamic> map) {
    var sentryMap = Map<String, String>();
    map.forEach((key, dynamic value) {
      if (value.toString() == null || value.toString().isEmpty) {
        sentryMap[key] = "none";
      } else {
        sentryMap[key] = value.toString();
      }
    });
    return sentryMap;
  }

  void _printLog(String message) {
    if (printLogs) {
      _logger.info(message);
    }
  }

  @override
  List<PlatformType> getSupportedPlatforms() => [
        PlatformType.Web,
        PlatformType.Android,
        PlatformType.iOS,
        PlatformType.MacOS,
        PlatformType.Windows
      ];
}
